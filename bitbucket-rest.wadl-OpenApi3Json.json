{
  "openapi": "3.0.0",
  "info": {
    "title": "API",
    "description": "Provides REST resources",
    "contact": {},
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://example.com/rest/",
      "variables": {}
    }
  ],
  "paths": {
    "/api/1.0/users/{userSlug}/settings": {
      "get": {
        "summary": "getUserSettings",
        "description": "Retrieve a map of user setting key values for a specific user identified by the user slug.\n <p>",
        "operationId": "getUserSettings",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "updateSettings",
        "description": "Update the entries of a map of user setting key/values for a specific user identified by the user slug.\n <p>",
        "operationId": "updateSettings",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/compare/diff{path:.*}": {
      "get": {
        "summary": "streamDiff",
        "description": "Gets a diff of the changes available in the {@code from} commit but not in the {@code to} commit.\n <p>\n If either the {@code from} or {@code to} commit are not specified, they will be replaced by the\n default branch of their containing repository.",
        "operationId": "streamDiff",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromRepo",
            "in": "query",
            "description": "an optional parameter specifying the source repository containing the source commit\n                 if that commit is not present in the current repository; the repository can be specified\n                 by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by\n                 a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "an optional number of context lines to include around each added or removed lines in the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "an optional whitespace flag which can be set to <code>ignore-all</code>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "the path to the file to diff (optional)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/compare/commits": {
      "get": {
        "summary": "streamCommits",
        "description": "Gets the commits accessible from the {@code from} commit but not in the {@code to} commit.\n <p>\n If either the {@code from} or {@code to} commit are not specified, they will be replaced by the\n default branch of their containing repository.",
        "operationId": "streamCommits",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromRepo",
            "in": "query",
            "description": "an optional parameter specifying the source repository containing the source commit\n                 if that commit is not present in the current repository; the repository can be specified\n                 by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by\n                 a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/compare/changes": {
      "get": {
        "summary": "streamChanges",
        "description": "Gets the file changes available in the {@code from} commit but not in the {@code to} commit.\n <p>\n If either the {@code from} or {@code to} commit are not specified, they will be replaced by the\n default branch of their containing repository.",
        "operationId": "streamChanges",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromRepo",
            "in": "query",
            "description": "an optional parameter specifying the source repository containing the source commit\n                 if that commit is not present in the current repository; the repository can be specified\n                 by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by\n                 a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/archive": {
      "get": {
        "summary": "getArchive",
        "description": "Streams an archive of the repository's contents at the requested commit. If no <code>at=</code> commit is\n requested, an archive of the default branch is streamed.\n <p>\n The <code>filename=</code> query parameter may be used to specify the exact filename to include in the\n <code>\"Content-Disposition\"</code> header. If an explicit filename is not provided, one will be automatically\n generated based on what is being archived. Its format depends on the <code>at=</code> value:\n <ul>\n     <li>No <code>at=</code> commit:\n     <code>&lt;slug&gt;-&lt;default-branch-name&gt;@&lt;commit&gt;.&lt;format&gt;</code>;\n     e.g. example-master@43c2f8a0fe8.zip</li>\n     <li><code>at=sha</code>: <code>&lt;slug&gt;-&lt;at&gt;.&lt;format&gt;</code>; e.g.\n     example-09bcbb00100cfbb5310fb6834a1d5ce6cac253e9.tar.gz</li>\n     <li><code>at=branchOrTag</code>: <code>&lt;slug&gt;-&lt;branchOrTag&gt;@&lt;commit&gt;.&lt;format&gt;</code>;\n     e.g. example-feature@bbb225f16e1.tar\n     <ul>\n         <li>If the branch or tag is qualified (e.g. <code>refs/heads/master</code>, the short name\n         (<code>master</code>) will be included in the filename</li>\n         <li>If the branch or tag's <i>short name</i> includes slashes (e.g. <code>release/4.6</code>),\n         they will be converted to hyphens in the filename (<code>release-4.5</code>)</li>\n     </ul>\n     </li>\n </ul>\n <p>\n Archives may be requested in the following formats by adding the <code>format=</code> query parameter:\n <ul>\n     <li><code>zip</code>: A zip file using standard compression (Default)</li>\n     <li><code>tar</code>: An uncompressed tarball</li>\n     <li><code>tar.gz</code> or <code>tgz</code>: A GZip-compressed tarball</li>\n </ul>\n The contents of the archive may be filtered by using the <code>path=</code> query parameter to specify paths to\n include. <code>path=</code> may be specified multiple times to include multiple paths.\n <p>\n The <code>prefix=</code> query parameter may be used to define a directory (or multiple directories) where\n the archive's contents should be placed. If the prefix does not end with <code>/</code>, one will be added\n automatically. The prefix is <i>always</i> treated as a directory; it is not possible to use it to prepend\n characters to the entries in the archive.\n <p>\n Archives of public repositories may be streamed by any authenticated or anonymous user. Streaming archives for\n non-public repositories requires an <i>authenticated user</i> with at least <b>REPO_READ</b> permission.",
        "operationId": "getArchive",
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "description": "the commit to stream an archive of; if not supplied, an archive of the default branch is streamed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "a filename to include the \"Content-Disposition\" header",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "the format to stream the archive in; must be one of: zip, tar, tar.gz or tgz",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "paths to include in the streamed archive; may be repeated to include multiple paths",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "a prefix to apply to all entries in the streamed archive; if the supplied prefix does not end\n                 with a trailing <code>/</code>, one will be added automatically",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/octet-stream; application/x-tar": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/branches": {
      "post": {
        "summary": "createBranch",
        "description": "Creates a branch using the information provided in the {@link RestCreateBranchRequest request}\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call\n this resource.",
        "operationId": "createBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createBranchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getBranches",
        "description": "Retrieve the branches matching the supplied <strong>filterText</strong> param.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getBranches",
        "parameters": [
          {
            "name": "base",
            "in": "query",
            "description": "base branch or tag to compare each branch to (for the metadata providers that uses that information)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "details",
            "in": "query",
            "description": "whether to retrieve plugin-provided metadata about each branch",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "the text to match on",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/branches/default": {
      "put": {
        "summary": "setDefaultBranch",
        "description": "Update the default branch of a repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "setDefaultBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setDefaultBranchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getDefaultBranch",
        "description": "Get the default branch of the repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getDefaultBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/diff": {
      "get": {
        "summary": "streamDiff",
        "description": "Retrieve the diff for a specified file path between two provided revisions.\n <p>\n <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap\n to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event\n that the cap is reached, the diff will be cut short and one or more <code>truncated</code> flags will be set to\n <code>true</code> on the segments, hunks and diffs substructures in the returned JSON response.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "GetstreamDiff",
        "parameters": [
          {
            "name": "contextLines",
            "in": "query",
            "description": "the number of context lines to include around added/removed lines in the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "the source path for the file, if it was copied, moved or renamed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "the target revision to diff to (required)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/diff/{path:.*}": {
      "get": {
        "summary": "streamDiff",
        "description": "Retrieve the diff for a specified file path between two provided revisions.\n <p>\n <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap\n to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event\n that the cap is reached, the diff will be cut short and one or more <code>truncated</code> flags will be set to\n <code>true</code> on the segments, hunks and diffs substructures in the returned JSON response.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "GetstreamDiff1",
        "parameters": [
          {
            "name": "contextLines",
            "in": "query",
            "description": "the number of context lines to include around added/removed lines in the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "the source path for the file, if it was copied, moved or renamed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "the target revision to diff to (required)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "the path to the file which should be diffed (required)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/mail-server": {
      "delete": {
        "summary": "deleteMailConfig",
        "description": "Deletes the current mail configuration.\n <p>\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "deleteMailConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getMailConfig",
        "description": "Retrieves the current mail configuration.\n\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "getMailConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setMailConfig",
        "description": "Updates the mail configuration\n\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "setMailConfig",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setMailConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/mail-server/sender-address": {
      "delete": {
        "summary": "clearSenderAddress",
        "description": "Clears the server email address.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "clearSenderAddress",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getSenderAddress",
        "description": "Retrieves the server email address",
        "operationId": "getSenderAddress",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setSenderAddress",
        "description": "Updates the server email address\n\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "setSenderAddress",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setSenderAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks": {
      "get": {
        "summary": "getRepositoryHooks",
        "description": "Retrieve a page of repository hooks for this repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getRepositoryHooks",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "the optional type to filter by. Valid values are <code>PRE_RECEIVE</code> or <code>POST_RECEIVE</code>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/settings": {
      "get": {
        "summary": "getSettings",
        "description": "Retrieve the settings for a repository hook for this repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getSettings",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setSettings",
        "description": "Modify the settings for a repository hook for this repository.\n <p>\n The service will reject any settings which are too large, the current limit is 32KB once serialized.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.\n <p>\n A JSON document can be provided to use as the settings for the hook. These structure and validity of the document\n is decided by the plugin providing the hook.",
        "operationId": "setSettings",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/enabled": {
      "put": {
        "summary": "enableHook",
        "description": "Enable a repository hook for this repository and optionally apply new configuration.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.\n <p>\n A JSON document may be provided to use as the settings for the hook. These structure and validity of\n the document is decided by the plugin providing the hook.",
        "operationId": "enableHook",
        "parameters": [
          {
            "name": "Content-Length",
            "in": "header",
            "description": "",
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "disableHook",
        "description": "Disable a repository hook for this repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "disableHook",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}": {
      "get": {
        "summary": "getRepositoryHook",
        "description": "Retrieve a repository hook for this repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getRepositoryHook",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteRepositoryHook",
        "description": "Delete repository hook configuration for the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong>\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "deleteRepositoryHook",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/files": {
      "get": {
        "summary": "streamFiles",
        "description": "Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files\n from any sub-directory of the specified directory will be returned.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "streamFiles",
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "description": "the commit ID or ref (e.g. a branch or tag) to list the files at.\n             If not specified the default branch will be used instead.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/files/{path:.*}": {
      "get": {
        "summary": "streamFiles",
        "description": "Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files\n from any sub-directory of the specified directory will be returned.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "GetstreamFiles",
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "description": "the commit ID or ref (e.g. a branch or tag) to list the files at.\n             If not specified the default branch will be used instead.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "the directory to list files for.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes": {
      "get": {
        "summary": "streamChanges",
        "description": "Gets changes for the specified PullRequest.\n <p>\n If the {@code changeScope} query parameter is set to {@code unreviewed}, the application will attempt to stream\n unreviewed changes based on the {@code lastReviewedCommit} of the current user, which are the changes between the\n {@code lastReviewedCommit} and the latest commit of the source branch. The current user is considered to\n <i>not</i> have any unreviewed changes for the pull request when the {@code lastReviewedCommit} is either\n {@code null} (everything is unreviewed, so all changes are streamed), equal to the latest commit of the source\n branch (everything is reviewed), or no longer on the source branch (the source branch has been rebased). In these\n cases, the application will fall back to streaming all changes (the default), which is the effective diff for the\n pull request. The type of changes streamed can be determined by the {@code changeScope} parameter included in the\n properties map of the response.\n <p>\n Note: This resource is currently <i>not paged</i>. The server will return at most one page. The server will\n truncate the number of changes to either the request's page limit or an internal maximum, whichever is smaller.\n The start parameter of the page request is also ignored.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "GetstreamChanges",
        "parameters": [
          {
            "name": "changeScope",
            "in": "query",
            "description": "{@code UNREVIEWED} to stream the unreviewed changes for the current user (if they exist);\n                    {@code RANGE} to stream changes between two arbitrary commits (requires {@code sinceId} and\n                    {@code untilId}); otherwise {@code ALL} to stream all changes (the default)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "ALL",
              "example": "ALL"
            }
          },
          {
            "name": "sinceId",
            "in": "query",
            "description": "the since commit hash to stream changes for a {@code RANGE} arbitrary change scope",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "untilId",
            "in": "query",
            "description": "the until commit hash to stream changes for a {@code RANGE} arbitrary change scope",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "{@code true} to apply comment counts in the changes (the default); otherwise, {@code false}\n                     to stream changes without comment counts",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve": {
      "post": {
        "summary": "approve",
        "description": "Approve a pull request as the current user. Implicitly adds the user as a participant if they are not already.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead",
        "operationId": "approve",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "withdrawApproval",
        "description": "Remove approval from a pull request as the current user. This does not remove the user as a participant.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead",
        "operationId": "withdrawApproval",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/profile/recent/repos": {
      "get": {
        "summary": "getRepositoriesRecentlyAccessed",
        "description": "Retrieve a page of recently accessed repositories for the currently authenticated user.\n <p>\n Repositories are ordered from most recently to least recently accessed.\n <p>\n Only authenticated users may call this resource.",
        "operationId": "getRepositoriesRecentlyAccessed",
        "parameters": [
          {
            "name": "permission",
            "in": "query",
            "description": "(optional) if specified, it must be a valid repository permission level name and will limit\n                   the resulting repository list to ones that the requesting user has the specified permission\n                   level to. If not specified, the default <code>REPO_READ</code> permission level will be assumed.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/last-modified": {
      "get": {
        "summary": "stream",
        "description": "Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications\n are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.\n <p>\n Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.",
        "operationId": "stream",
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "description": "the commit to use as the starting point when listing files and calculating modifications",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/last-modified/{path:.*}": {
      "get": {
        "summary": "stream",
        "description": "Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications\n are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.\n <p>\n Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.",
        "operationId": "Getstream",
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "description": "the commit to use as the starting point when listing files and calculating modifications",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "the path within the repository whose files should be streamed",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/license": {
      "get": {
        "summary": "get",
        "description": "Retrieves details about the current license, as well as the current status of the system with regards to the\n installed license. The status includes the current number of users applied toward the license limit, as well\n as any status messages about the license (warnings about expiry or user counts exceeding license limits).\n <p>\n The authenticated user must have <b>ADMIN</b> permission. Unauthenticated users, and non-administrators, are\n not permitted to access license details.",
        "operationId": "get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "update",
        "description": "Decodes the provided encoded license and sets it as the active license. If no license was provided, a 400 is\n returned. If the license cannot be decoded, or cannot be applied, a 409 is returned. Some possible reasons a\n license may not be applied include:\n <ul>\n     <li>It is for a different product</li>\n     <li>It is already expired</li>\n </ul>\n Otherwise, if the license is updated successfully, details for the new license are returned with a 200 response.\n <p>\n <b>Warning</b>: It is possible to downgrade the license during update, applying a license with a lower number\n of permitted users. If the number of currently-licensed users exceeds the limits of the new license, pushing\n will be disabled until the licensed user count is brought into compliance with the new license.\n <p>\n The authenticated user must have <b>SYS_ADMIN</b> permission. <b>ADMIN</b> users may <i>view</i> the current\n license details, but they may not <i>update</i> the license.",
        "operationId": "update",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests": {
      "get": {
        "summary": "getPullRequests",
        "description": "Retrieve a page of pull requests in the current repository that contain the given commit.\n <p>\n The user must be authenticated and have access to the specified repository to call this resource.",
        "operationId": "getPullRequests",
        "parameters": [
          {
            "name": "commitId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/participants": {
      "get": {
        "summary": "search",
        "description": "Retrieve a page of participant users for all the pull requests to or from the specified repository.\n <p>\n <p>\n Optionally clients can specify following filters.",
        "operationId": "search",
        "parameters": [
          {
            "name": "direction",
            "in": "query",
            "description": "(optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified\n                  repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "incoming",
              "example": "incoming"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "(optional) return only users, whose username, name or email address <i>contain</i>\n                  the {@code filter} value",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "(optional) The role associated with the pull request participant.\n                  This must be one of {@code AUTHOR}, {@code REVIEWER}, or{@code PARTICIPANT}",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments": {
      "get": {
        "summary": "getComments",
        "description": "Retrieves the commit discussion comments that match the specified search criteria.\n <p>\n It is possible to retrieve commit discussion comments that are anchored to a range of commits by providing the\n {@code sinceId} that the comments anchored from.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "getComments",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "the path to the file on which comments were made",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "For a merge commit, a parent can be provided to specify which diff the comments are on. For\n                      a commit range, a {@code sinceId} can be provided to specify where the comments are anchored\n                      from.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "createComment",
        "description": "Add a new comment.\n <p>\n Comments can be added in a few places by setting different attributes:\n <p>\n General commit comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a commit.\"\n     }\n     </pre>\n\n Reply to a comment:\n\n <pre>\n     {\n         \"text\": \"A measured reply.\",\n         \"parent\": {\n             \"id\": 1\n         }\n     }\n     </pre>\n\n General file comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a file.\",\n         \"anchor\": {\n             \"diffType\": \"COMMIT\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n\n File line comment:\n\n <pre>\n     {\n         \"text\": \"A pithy comment on a particular line within a file.\",\n         \"anchor\": {\n             \"diffType\": \"COMMIT\",\n             \"line\": 1,\n             \"lineType\": \"CONTEXT\",\n             \"fileType\": \"FROM\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n     }\n     }\n     </pre>\n <strong>Note: general file comments are an experimental feature and may change in the near future!</strong>\n <p>\n For file and line comments, 'path' refers to the path of the file to which the comment should be applied and\n 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also,\n fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment\n was added. Finally diffType refers to the type of diff the comment was added on.\n <p>\n For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to\n the type of diff hunk, which can be:\n <ul>\n     <li>'ADDED' - for an added line;</li>\n     <li>'REMOVED' - for a removed line; or</li>\n     <li>'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>\n </ul>\n 'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when\n displaying the diff in a side-by-side way. Currently the supported values are:\n <ul>\n     <li>'FROM' - the source file of the diff</li>\n     <li>'TO' - the destination file of the diff</li>\n </ul>\n If the current user is not a participant the user is added as one and updated to watch the commit.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "createComment",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "For a merge commit, a parent can be provided to specify which diff the comments should be on. For\n                 a commit range, a {@code sinceId} can be provided to specify where the comments should be\n                 anchored from.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}": {
      "get": {
        "summary": "getComment",
        "description": "Retrieves a commit discussion comment.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "getComment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "the ID of the comment to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteComment",
        "description": "Delete a commit comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong>\n and above may delete comments created by other users. Comments which have replies <i>may not be deleted</i>,\n regardless of the user's granted permissions.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The expected version of the comment. This must match the server's version of the comment or\n                  the delete will fail. To determine the current version of the comment, the comment should be\n                  fetched from the server prior to the delete. Look for the 'version' attribute in the returned\n                  JSON structure.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "the ID of the comment to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "updateComment",
        "description": "Update the text of a comment. Only the user who created a comment may update it.\n <p>\n <strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match\n the server's version of the comment or the update will fail. To determine the current version of the comment,\n the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the\n returned JSON structure.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit\n is in to call this resource.",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "the ID of the comment to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/raw": {
      "get": {
        "summary": "streamRaw",
        "description": "Retrieve the raw content for a file path at a specified revision.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "streamRaw",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/raw/{path:.*}": {
      "get": {
        "summary": "streamRaw",
        "description": "Retrieve the raw content for a file path at a specified revision.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.",
        "operationId": "GetstreamRaw",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "the file path to retrieve content from",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/groups": {
      "get": {
        "summary": "getGroupsWithAnyPermission",
        "description": "Retrieve a page of groups that have been granted at least one permission for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getGroupsWithAnyPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setPermissionForGroup",
        "description": "Promote or demote a group's permission level for the specified repository. Available repository permissions are:\n <ul>\n     <li>REPO_READ</li>\n     <li>REPO_WRITE</li>\n     <li>REPO_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions\">Bitbucket\n Server documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource. In addition, a user may not demote a group's permission level if their\n own permission level would be reduced as a result.",
        "operationId": "setPermissionForGroup",
        "parameters": [
          {
            "name": "permission",
            "in": "query",
            "description": "the permission to grant",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "the names of the groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "revokePermissionsForGroup",
        "description": "Revoke all permissions for the specified repository for a group.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.\n <p>\n In addition, a user may not revoke a group's permissions if it will reduce their own permission level.",
        "operationId": "revokePermissionsForGroup",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name of the group",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/groups/none": {
      "get": {
        "summary": "getGroupsWithoutAnyPermission",
        "description": "Retrieve a page of groups that have no granted permissions for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getGroupsWithoutAnyPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/users": {
      "get": {
        "summary": "getUsersWithAnyPermission",
        "description": "Retrieve a page of users that have been granted at least one permission for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getUsersWithAnyPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only user names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setPermissionForUser",
        "description": "Promote or demote a user's permission level for the specified repository. Available repository permissions are:\n <ul>\n     <li>REPO_READ</li>\n     <li>REPO_WRITE</li>\n     <li>REPO_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions\">Bitbucket\n Server documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource. In addition, a user may not reduce their own permission level unless\n they have a project or global permission that already implies that permission.",
        "operationId": "setPermissionForUser",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the names of the users",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "the permission to grant",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "revokePermissionsForUser",
        "description": "Revoke all permissions for the specified repository for a user.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.\n <p>\n In addition, a user may not revoke their own repository permissions if they do not have a higher\n project or global permission.",
        "operationId": "revokePermissionsForUser",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name of the user",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/users/none": {
      "get": {
        "summary": "getUsersWithoutPermission",
        "description": "Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher\n project or global permission to call this resource.",
        "operationId": "getUsersWithoutPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only user names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff": {
      "get": {
        "summary": "streamDiff",
        "description": "Streams a diff within a pull request.\n <p>\n If the specified file has been copied, moved or renamed, the <code>srcPath</code> must also be specified to\n produce the correct diff.\n <p>\n Note: This RESTful endpoint is currently <i>not paged</i>. The server will internally apply a hard cap to the\n streamed lines, and it is not possible to request subsequent pages if that cap is exceeded.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "GetstreamDiff12",
        "parameters": [
          {
            "name": "contextLines",
            "in": "query",
            "description": "the number of context lines to include around added/removed lines in the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "diffType",
            "in": "query",
            "description": "the type of diff being requested. When {@code withComments} is {@code true}\n                     this works as a hint to the system to attach the correct set of comments to the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "EFFECTIVE",
              "example": "EFFECTIVE"
            }
          },
          {
            "name": "sinceId",
            "in": "query",
            "description": "the since commit hash to stream a diff between two arbitrary hashes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "the previous path to the file, if the file has been copied, moved or renamed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "untilId",
            "in": "query",
            "description": "the until commit hash to stream a diff between two arbitrary hashes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "<code>true</code> to embed comments in the diff (the default); otherwise, <code>false</code>\n                     to stream the diff without comments",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path:.*}": {
      "get": {
        "summary": "streamDiff",
        "description": "Streams a diff within a pull request.\n <p>\n If the specified file has been copied, moved or renamed, the <code>srcPath</code> must also be specified to\n produce the correct diff.\n <p>\n Note: This RESTful endpoint is currently <i>not paged</i>. The server will internally apply a hard cap to the\n streamed lines, and it is not possible to request subsequent pages if that cap is exceeded.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "GetstreamDiff123",
        "parameters": [
          {
            "name": "contextLines",
            "in": "query",
            "description": "the number of context lines to include around added/removed lines in the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "diffType",
            "in": "query",
            "description": "the type of diff being requested. When {@code withComments} is {@code true}\n                     this works as a hint to the system to attach the correct set of comments to the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "EFFECTIVE",
              "example": "EFFECTIVE"
            }
          },
          {
            "name": "sinceId",
            "in": "query",
            "description": "the since commit hash to stream a diff between two arbitrary hashes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "the previous path to the file, if the file has been copied, moved or renamed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "untilId",
            "in": "query",
            "description": "the until commit hash to stream a diff between two arbitrary hashes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "<code>true</code> to embed comments in the diff (the default); otherwise, <code>false</code>\n                     to stream the diff without comments",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "the path to the file which should be diffed (optional)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/cluster": {
      "get": {
        "summary": "getInformation",
        "description": "Gets information about the nodes that currently make up the stash cluster.\n <p>\n The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.",
        "operationId": "getInformation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants": {
      "get": {
        "summary": "listParticipants",
        "description": "Retrieves a page of the participants for a given pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "listParticipants",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "assignParticipantRole",
        "description": "Assigns a participant to an explicit role in pull request. Currently only the REVIEWER role may be assigned.\n <p>\n If the user is not yet a participant in the pull request, they are made one and assigned the supplied role.\n <p>\n If the user is already a participant in the pull request, their previous role is replaced with the supplied role\n unless they are already assigned the AUTHOR role which cannot be changed and will result in a Bad Request (400)\n response code.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "assignParticipantRole",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assignParticipantRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "unassignParticipantRole",
        "description": "Unassigns a participant from the REVIEWER role they may have been given in a pull request.\n <p>\n If the participant has no explicit role this method has no effect.\n <p>\n Afterwards, the user will still remain a participant in the pull request but their role will be reduced to\n PARTICIPANT. This is because once made a participant of a pull request,\n a user will forever remain a participant. Only their role may be altered.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}\n instead.",
        "operationId": "unassignParticipantRole",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "the participant's user name",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}": {
      "delete": {
        "summary": "unassignParticipantRole",
        "description": "Unassigns a participant from the REVIEWER role they may have been given in a pull request.\n <p>\n If the participant has no explicit role this method has no effect.\n <p>\n Afterwards, the user will still remain a participant in the pull request but their role will be reduced to\n PARTICIPANT. This is because once made a participant of a pull request,\n a user will forever remain a participant. Only their role may be altered.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.\n <p>\n <strong>Deprecated since 4.2</strong>. Use\n /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}\n instead.",
        "operationId": "DeleteunassignParticipantRole",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "the slug for the user changing their status",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "updateStatus",
        "description": "Change the current user's status for a pull request. Implicitly adds the user as a participant if they are not\n already. If the current user is the author, this method will fail.\n <p>\n The possible values for {@code status} are <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or\n <strong>APPROVED</strong>.\n <p>\n If the new {@code status} is <strong>NEEDS_WORK</strong> or <strong>APPROVED</strong> then the\n {@code lastReviewedCommit} for the participant will be updated to the latest commit of the source branch of the\n pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "the slug for the user changing their status",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects": {
      "get": {
        "summary": "getProjects",
        "description": "Retrieve a page of projects.\n <p>\n Only projects for which the authenticated user has the <strong>PROJECT_VIEW</strong> permission will be returned.",
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "createProject",
        "description": "Create a new project.\n <p>\n To include a custom avatar for the project, the project definition should contain an additional attribute with\n the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be in\n the following format:\n <pre>\n     data:(content type, e.g. image/png);base64,(data)\n </pre>\n If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid,\n <em>project creation will fail</em>.\n <p>\n The authenticated user must have <strong>PROJECT_CREATE</strong> permission to call this resource.",
        "operationId": "createProject",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}": {
      "get": {
        "summary": "getProject",
        "description": "Retrieve the project matching the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this\n resource.",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteProject",
        "description": "Delete the project matching the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "updateProject",
        "description": "Update the project matching the <strong>projectKey</strong> supplied in the resource path.\n <p>\n To include a custom avatar for the updated project, the project definition should contain an additional attribute\n with the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be\n in the following format:\n <code>\n     data:(content type, e.g. image/png);base64,(data)\n </code>\n If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid,\n <em>project creation will fail</em>.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/avatar.png": {
      "post": {
        "summary": "uploadAvatar",
        "description": "Update the avatar for the project matching the supplied <strong>projectKey</strong>.\n <p>\n This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.\n <p>\n There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded file size\n (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and\n <strong>JPEG</strong> are preferred due to the file size limit.\n <p>\n This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to\n pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the\n value <code>no-check</code>.\n <p>\n An example <a href=\"http://curl.haxx.se/\">curl</a> request to upload an image name 'avatar.png' would be:\n <pre>\n curl -X POST -u username:password -H \"X-Atlassian-Token: no-check\" http://example.com/rest/api/1.0/projects/STASH/avatar.png -F avatar=@avatar.png\n </pre>\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "uploadAvatar",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getProjectAvatar",
        "description": "Retrieve the avatar for the project matching the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this\n resource.",
        "operationId": "getProjectAvatar",
        "parameters": [
          {
            "name": "s",
            "in": "query",
            "description": "The desired size of the image. The server will return an image as close as possible to the specified\n             size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "image/png": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/settings/hooks": {
      "get": {
        "summary": "getRepositoryHooks",
        "description": "Retrieve a page of repository hooks for this project.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "GetgetRepositoryHooks",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "the optional type to filter by. Valid values are <code>PRE_RECEIVE</code> or <code>POST_RECEIVE</code>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/settings/hooks/{hookKey}/settings": {
      "get": {
        "summary": "getSettings",
        "description": "Retrieve the settings for a repository hook for this project.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "GetgetSettings",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setSettings",
        "description": "Modify the settings for a repository hook for this project.\n <p>\n The service will reject any settings which are too large, the current limit is 32KB once serialized.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.\n <p>\n A JSON document can be provided to use as the settings for the hook. These structure and validity of the document\n is decided by the plugin providing the hook.",
        "operationId": "PutsetSettings",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/settings/hooks/{hookKey}/enabled": {
      "put": {
        "summary": "enableHook",
        "description": "Enable a repository hook for this project and optionally apply new configuration.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.\n <p>\n A JSON document may be provided to use as the settings for the hook. These structure and validity of\n the document is decided by the plugin providing the hook.",
        "operationId": "PutenableHook",
        "parameters": [
          {
            "name": "Content-Length",
            "in": "header",
            "description": "",
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "disableHook",
        "description": "Disable a repository hook for this project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "DeletedisableHook",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/settings/hooks/{hookKey}": {
      "get": {
        "summary": "getRepositoryHook",
        "description": "Retrieve a repository hook for this project.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "GetgetRepositoryHook",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/labels": {
      "post": {
        "summary": "addLabel",
        "description": "Applies a label to the repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "addLabel",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addLabelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getAllLabelsForRepository",
        "description": "Get all labels applied to the given repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository.",
        "operationId": "getAllLabelsForRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/labels/{labelName}": {
      "delete": {
        "summary": "removeLabel",
        "description": "Remove label that is applied to the given repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "removeLabel",
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/browse": {
      "get": {
        "summary": "getContent",
        "description": "Retrieve a page of content for a file path at a specified revision.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getContent",
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "description": "the commit ID or ref to retrieve the content for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "if true only the type will be returned for the file path instead of the contents.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "blame",
            "in": "query",
            "description": "if present the blame will be returned for the file as well.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noContent",
            "in": "query",
            "description": "if present and used with blame only the blame is retrieved instead of the contents.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/browse/{path:.*}": {
      "get": {
        "summary": "getContent",
        "description": "Retrieve a page of content for a file path at a specified revision.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "GetgetContent",
        "parameters": [
          {
            "name": "at",
            "in": "query",
            "description": "the commit ID or ref to retrieve the content for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "if true only the type will be returned for the file path instead of the contents.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "blame",
            "in": "query",
            "description": "if present the blame will be returned for the file as well.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noContent",
            "in": "query",
            "description": "if present and used with blame only the blame is retrieved instead of the contents.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "the path of the file that is to be modified or created",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "editFile",
        "description": "Update the content of <code>path</code>, on the given <code>repository</code> and <code>branch</code>.\n <p>\n This resource accepts PUT multipart form data, containing the file in a form-field named <code>content</code>.\n <p>\n An example <a href=\"http://curl.haxx.se/\">curl</a> request to update 'README.md' would be:\n <pre>\n curl -X PUT -u username:password -F content=@README.md  -F 'message=Updated using file-edit REST API'\n -F branch=master -F  sourceCommitId=5636641a50b\n  http://example.com/rest/api/latest/projects/PROJECT_1/repos/repo_1/browse/README.md\n </pre>\n <p>\n <ui>\n <li>branch:  the branch on which the <code>path</code> should be modified or created</li>\n <li>content: the full content of the file at <code>path</code> </li>\n <li>message: the message associated with this change, to be used as the commit message.\n Or null if the default message should be used.</li>\n <li>sourceCommitId: the commit ID of the file before it was edited, used to identify if\n content has changed. Or null if this is a new file</li>\n </ui>\n <p>\n The file can be updated or created on a new branch. In this case, the <code>sourceBranch</code> parameter should\n be provided to identify the starting point for the new branch and the <code>branch</code> parameter identifies\n the branch to create the new commit on.",
        "operationId": "editFile",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "the path of the file that is to be modified or created",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks": {
      "post": {
        "summary": "createWebhook",
        "description": "Create a webhook for the repository specified via the URL.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "createWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "findWebhooks",
        "description": "Find webhooks in this repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "findWebhooks",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "list of {@link com.atlassian.webhooks.WebhookEvent} ids to filter for",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "{@code true} if statistics should be provided for all found webhooks",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}": {
      "delete": {
        "summary": "deleteWebhook",
        "description": "Delete a webhook for the repository specified via the URL.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "the existing webhook id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getWebhook",
        "description": "Get a webhook by id.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getWebhook",
        "parameters": [
          {
            "name": "statistics",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "the existing webhook id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "updateWebhook",
        "description": "Update an existing webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "the existing webhook id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/latest": {
      "get": {
        "summary": "getLatestInvocation",
        "description": "Get the latest invocations for a specific webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getLatestInvocation",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "the string id of a specific event to retrieve the last invocation for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outcome",
            "in": "query",
            "description": "the outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None specified means that the all\n                  will be considered",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "id of the webhook",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics": {
      "get": {
        "summary": "getStatistics",
        "description": "Get the statistics for a specific webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getStatistics",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "the string id of a specific event to retrieve the last invocation for. May be empty, in which\n                  case all events are considered",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "id of the webhook",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics/summary": {
      "get": {
        "summary": "getStatisticsSummary",
        "description": "Get the statistics summary for a specific webhook.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getStatisticsSummary",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "id of the webhook",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/test": {
      "post": {
        "summary": "testWebhook",
        "description": "Test connectivity to a specific endpoint.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "testWebhook",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "the url in which to connect to",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/repos": {
      "get": {
        "summary": "getRepositories",
        "description": "Retrieve a page of repositories based on query parameters that control the search. See the documentation of the\n parameters for more details.\n <p>\n This resource is anonymously accessible.\n <p>\n <b>Note on permissions.</b> In absence of the <code>permission</code> query parameter the implicit 'read' permission\n is assumed. Please note that this permission is lower than the REPO_READ permission rather than being equal to\n it. The implicit 'read' permission for a given repository is assigned to any user that has any of the higher\n permissions, such as <tt>REPO_READ</tt>, as well as to anonymous users if the repository is marked as public.\n The important implication of the above is that an anonymous request to this resource with a permission level\n <tt>REPO_READ</tt> is guaranteed to receive an empty list of repositories as a result. For anonymous requests\n it is therefore recommended to not specify the <tt>permission</tt> parameter at all.",
        "operationId": "getRepositories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose name\n                    matches this parameter's value. The match will be done case-insensitive and any leading\n                    and/or trailing whitespace characters on the <code>name</code> parameter will be stripped.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectname",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose project's\n                    name matches this parameter's value. The match will be done case-insensitive and any leading\n                    and/or trailing whitespace characters on the <code>projectname</code> parameter will\n                    be stripped.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "(optional) if specified, it must be a valid repository permission level name and will limit\n                    the resulting repository list to ones that the requesting user has the specified permission\n                    level to. If not specified, the default implicit 'read' permission level will be assumed. The\n                    currently supported explicit permission values are <tt>REPO_READ</tt>, <tt>REPO_WRITE</tt>\n                    and <tt>REPO_ADMIN</tt>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "(optional) if specified, it must be a valid repository state name and will limit the resulting\n                    repository list to ones that are in the specified state. The currently supported explicit state\n                    values are <tt>AVAILABLE</tt>, <tt>INITIALISING</tt> and <tt>INITIALISATION_FAILED</tt>.<br>\n                    <em>Available since 5.13</em>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list based on the\n                    repositories visibility. Valid values are <em>public</em> or <em>private</em>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/watch": {
      "post": {
        "summary": "watch",
        "description": "Add the authenticated user as a watcher for the specified commit.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit\n to call this resource.",
        "operationId": "watch",
        "parameters": [
          {
            "name": "commitId",
            "in": "path",
            "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "unwatch",
        "description": "Remove the authenticated user as a watcher for the specified commit.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit\n to call this resource.",
        "operationId": "unwatch",
        "parameters": [
          {
            "name": "commitId",
            "in": "path",
            "description": "the <i>full {@link Commit#getId() ID}</i> of the commit within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/application-properties": {
      "get": {
        "summary": "getApplicationProperties",
        "description": "Retrieve version information and other application properties.\n <p>\n No authentication is required to call this resource.",
        "operationId": "getApplicationProperties",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch": {
      "post": {
        "summary": "watch",
        "description": "Add the authenticated user as a watcher for the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "Postwatch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "unwatch",
        "description": "Remove the authenticated user as a watcher for the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "Deleteunwatch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/labels": {
      "get": {
        "summary": "getLabels",
        "description": "Returns a paged response of all the labels in the system.\n <p>\n The user needs to be authenticated to use this resource.",
        "operationId": "getLabels",
        "parameters": [
          {
            "name": "prefix",
            "in": "query",
            "description": "(optional) prefix to filter the labels on.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/labels/{labelName}": {
      "get": {
        "summary": "getLabel",
        "description": "Returns a label.\n <p>\n The user needs to be authenticated to use this resource.",
        "operationId": "getLabel",
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/labels/{labelName}/labeled": {
      "get": {
        "summary": "getLabelables",
        "description": "Returns a page of labelables for a given label.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "getLabelables",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "the type of labelables to be returned. Supported values: REPOSITORY",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labelName",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/changes": {
      "get": {
        "summary": "getChanges",
        "description": "Retrieve a page of changes made in a specified commit.\n <p>\n <strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not\n possible to request subsequent content when that cap is exceeded.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getChanges",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "the commit to which <code>until</code> should be compared to produce a page of changes.\n                     If not specified the commit's first parent is assumed (if one exists)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "the commit to retrieve changes for",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/logs/logger/{loggerName}": {
      "get": {
        "summary": "getLevel",
        "description": "Retrieve the current log level for a given logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getLevel",
        "parameters": [
          {
            "name": "loggerName",
            "in": "path",
            "description": "the name of the logger.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/logs/logger/{loggerName}/{levelName}": {
      "put": {
        "summary": "setLevel",
        "description": "Set the current log level for a given logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "setLevel",
        "parameters": [
          {
            "name": "levelName",
            "in": "path",
            "description": "the level to set the logger to. Either TRACE, DEBUG, INFO, WARN or ERROR",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loggerName",
            "in": "path",
            "description": "the name of the logger.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/logs/rootLogger": {
      "get": {
        "summary": "getRootLevel",
        "description": "Retrieve the current log level for the root logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getRootLevel",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/logs/rootLogger/{levelName}": {
      "put": {
        "summary": "setRootLevel",
        "description": "Set the current log level for the root logger.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "setRootLevel",
        "parameters": [
          {
            "name": "levelName",
            "in": "path",
            "description": "the level to set the logger to. Either TRACE, DEBUG, INFO, WARN or ERROR",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/tasks": {
      "post": {
        "summary": "createTask",
        "description": "Create a new task.",
        "operationId": "createTask",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/tasks/{taskId}": {
      "get": {
        "summary": "getTask",
        "description": "Retrieve a existing task.",
        "operationId": "getTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "the id identifying the task to delete",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteTask",
        "description": "Delete a task.\n <p>\n Note that only the task's creator, the context's author or an admin of the context's repository can delete a\n task. (For a pull request task, those are the task's creator, the pull request's author or an admin on the\n repository containing the pull request). Additionally a task cannot be deleted if it has already been resolved.",
        "operationId": "deleteTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "the id identifying the task to delete",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "updateTask",
        "description": "Update a existing task.\n <p>\n As of Stash 3.3, only the state and text of a task can be updated.\n <p>\n Updating the state of a task is allowed for any user having <em>READ</em> access to the repository.\n However only the task's creator, the context's author or an admin of the context's repository can update the\n task's text. (For a pull request task, those are the task's creator, the pull request's author or an admin on the\n repository containing the pull request). Additionally the task's text cannot be updated if it has been resolved.",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "the id identifying the task to delete",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/hooks/{hookKey}/avatar": {
      "get": {
        "summary": "getAvatar",
        "description": "Retrieve the avatar for the project matching the supplied <strong>moduleKey</strong>.",
        "operationId": "getAvatar",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "optional version used for HTTP caching only - any non-blank version will result in a large max-age Cache-Control header.\n                Note that this does not affect the Last-Modified header.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "the complete module key of the hook module",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "image/png": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/groups": {
      "get": {
        "summary": "getGroups",
        "description": "Retrieve a page of groups.\n <p>\n The authenticated user must have <strong>LICENSED_USER</strong> permission or higher to call this resource.",
        "operationId": "getGroups",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "createGroup",
        "description": "Create a new group.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "createGroup",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the group.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteGroup",
        "description": "Deletes the specified group, removing them from the system. This also removes any permissions that may have been\n granted to the group.\n <p>\n A user may not delete the last group that is granting them administrative permissions, or a group with greater\n permissions than themselves.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name identifying the group to delete",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users": {
      "put": {
        "summary": "updateUserDetails",
        "description": "Update a user's details.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "updateUserDetails",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "createUser",
        "description": "Creates a new user from the assembled query parameters.\n <p>\n The default group can be used to control initial permissions for new users, such as granting users the ability\n to login or providing read access to certain projects or repositories. If the user is not added to the default\n group, they may not be able to login after their account is created until explicit permissions are configured.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the username for the new user",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "the password for the new user",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "the display name for the new user",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "the e-mail address for the new user",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addToDefaultGroup",
            "in": "query",
            "description": "<code>true</code> to add the user to the default group, which can be used to grant them\n                          a set of initial permissions; otherwise, <code>false</code> to not add them to a group",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "notify",
            "in": "query",
            "description": "if present and not <code>false</code> instead of requiring a password,\n                          the create user will be notified via email their account has been created and requires\n                          a password to be reset. This option can only be used if a mail server has been configured",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteUser",
        "description": "Deletes the specified user, removing them from the system. This also removes any permissions that may have been\n granted to the user.\n <p>\n A user may not delete themselves, and a user with <strong>ADMIN</strong> permissions may not delete a user with\n <strong>SYS_ADMIN</strong>permissions.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the username identifying the user to delete",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getUsers",
        "description": "Retrieve a page of users.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only users with usernames, display name or email addresses containing the supplied\n               string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/credentials": {
      "put": {
        "summary": "updateUserPassword",
        "description": "Update a user's password.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not update\n the password of a user with greater permissions than themselves.",
        "operationId": "updateUserPassword",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/erasure": {
      "get": {
        "summary": "validateErasable",
        "description": "Validate if a user can be erased.\n <p>\n A username is only valid for erasure if it exists as the username of a deleted user. This endpoint will return\n an appropriate error response if the supplied username is invalid for erasure.\n <p>\n This endpoint does <strong>not</strong> perform the actual user erasure, and will not modify the application in\n any way.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "validateErasable",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the username of the user to validate erasability for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "eraseUser",
        "description": "Erases personally identifying user data for a deleted user.\n <p>\n References in the application to the original username will be either removed or updated to a new non-identifying\n username. Refer to the\n <a href=\"https://confluence.atlassian.com/gdpr/bitbucket-right-to-erasure-949770560.html\">support guide</a> for\n details about what data is and isn't erased.\n <p>\n User erasure can only be performed on a deleted user. If the user has not been deleted first then this endpoint\n will return a bad request and no erasure will be performed.\n <p>\n Erasing user data is <strong>irreversible</strong> and may lead to a degraded user experience. This method should\n not be used as part of a standard user deletion and cleanup process.\n <p>\n Plugins can participate in user erasure by defining a {@code <user-erasure-handler>} module. If one or more plugin\n modules fail, an error summary of the failing modules is returned.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "eraseUser",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the username identifying the user to erase",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/rename": {
      "post": {
        "summary": "renameUser",
        "description": "Rename a user.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "renameUser",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/renameUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/captcha": {
      "delete": {
        "summary": "clearUserCaptchaChallenge",
        "description": "Clears any CAPTCHA challenge that may constrain the user with the supplied username when they authenticate.\n Additionally any counter or metric that contributed towards the user being issued the CAPTCHA challenge\n (for instance too many consecutive failed logins) will also be reset.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not clear\n the CAPTCHA of a user with greater permissions than themselves.",
        "operationId": "clearUserCaptchaChallenge",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/groups/add-user": {
      "post": {
        "summary": "addUserToGroup",
        "description": "<strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.\n <p>\n Add a user to a group.\n <p>\n In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addUserToGroup",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addUserToGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/add-group": {
      "post": {
        "summary": "addGroupToUser",
        "description": "<strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.\n <p>\n Add a user to a group. This is very similar to <code>groups/add-user</code>, but with the <em>context</em> and\n <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear\n redundant, but it facilitates a specific UI component in Stash.\n <p>\n In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addGroupToUser",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addGroupToUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/groups/add-users": {
      "post": {
        "summary": "addUsersToGroup",
        "description": "Add multiple users to a group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addUsersToGroup",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addUsersToGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/add-groups": {
      "post": {
        "summary": "addUserToGroups",
        "description": "Add a user to one or more groups.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "addUserToGroups",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addUserToGroupsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/groups/remove-user": {
      "post": {
        "summary": "removeUserFromGroup",
        "description": "<strong>Deprecated since 2.10</strong>. Use /rest/users/remove-groups instead.\n <p>\n Remove a user from a group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.\n <p>\n In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.",
        "operationId": "removeUserFromGroup",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/removeUserFromGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/remove-group": {
      "post": {
        "summary": "removeGroupFromUser",
        "description": "Remove a user from a group. This is very similar to <code>groups/remove-user</code>, but with the <em>context</em>\n and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear\n redundant, but it facilitates a specific UI component in Stash.\n <p>\n In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.\n <p>\n The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.",
        "operationId": "removeGroupFromUser",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/removeGroupFromUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/groups/more-members": {
      "get": {
        "summary": "findUsersInGroup",
        "description": "Retrieves a list of users that are members of a specified group.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findUsersInGroup",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "the group which should be used to locate members",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only users with usernames, display names or email addresses containing the\n                  supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/groups/more-non-members": {
      "get": {
        "summary": "findUsersNotInGroup",
        "description": "Retrieves a list of users that are <em>not</em> members of a specified group.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findUsersNotInGroup",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "the group which should be used to locate non-members",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only users with usernames, display names or email addresses containing the\n                  supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/more-members": {
      "get": {
        "summary": "findGroupsForUser",
        "description": "Retrieves a list of groups the specified user is a member of.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findGroupsForUser",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "the user which should be used to locate groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only groups with names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/users/more-non-members": {
      "get": {
        "summary": "findOtherGroupsForUser",
        "description": "Retrieves a list of groups the specified user is <em>not</em> a member of.\n <p>\n The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.",
        "operationId": "findOtherGroupsForUser",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "the user which should be used to locate groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only groups with names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/groups": {
      "get": {
        "summary": "getGroups1",
        "description": "Retrieve a page of group names.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getGroups1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos": {
      "get": {
        "summary": "getRepositories",
        "description": "Retrieve repositories from the project corresponding to the supplied <strong>projectKey</strong>.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified project to call this\n resource.",
        "operationId": "GetgetRepositories",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "the parent project key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "createRepository",
        "description": "Create a new repository. Requires an existing project in which this repository will be created.\n The only parameters which will be used are name and scmId.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context project to call this\n resource.",
        "operationId": "createRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "the parent project key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}": {
      "get": {
        "summary": "getRepository",
        "description": "Retrieve the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong>.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "the parent project key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "the repository slug",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "updateRepository",
        "description": "Update the repository matching the <strong>repositorySlug</strong> supplied in the resource path.\n <p>\n The repository's slug is derived from its name. If the name changes the slug may also change.\n <p>\n This API can be used to move the repository to a different project by setting the new project in the request,\n example: {@code {\"project\":{\"key\":\"NEW_KEY\"}}} .\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "updateRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "the parent project key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "the repository slug",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteRepository",
        "description": "Schedule the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong> to\n be deleted. If the request repository is not present\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this\n resource.",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "the parent project key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "the repository slug",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "forkRepository",
        "description": "Create a new repository forked from an existing repository.\n <p>\n The JSON body for this {@code POST} is not required to contain <i>any</i> properties. Even the name may be\n omitted. The following properties will be used, if provided:\n <ul>\n     <li>{@code \"name\":\"Fork name\"} - Specifies the forked repository's name\n     <ul>\n         <li>Defaults to the name of the origin repository if not specified</li>\n     </ul>\n     </li>\n     <li>{@code \"project\":{\"key\":\"TARGET_KEY\"}} - Specifies the forked repository's target project by key\n     <ul>\n         <li>Defaults to the current user's personal project if not specified</li>\n     </ul>\n     </li>\n </ul>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository and\n <strong>PROJECT_ADMIN</strong> on the target project to call this resource. Note that users <i>always</i>\n have <b>PROJECT_ADMIN</b> permission on their personal projects.",
        "operationId": "forkRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "the parent project key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "the repository slug",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/forkRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/contributing": {
      "get": {
        "summary": "findContributing",
        "description": "",
        "operationId": "findContributing",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/license": {
      "get": {
        "summary": "findLicense",
        "description": "",
        "operationId": "findLicense",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/readme": {
      "get": {
        "summary": "findReadme",
        "description": "",
        "operationId": "findReadme",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/forks": {
      "get": {
        "summary": "getForkedRepositories",
        "description": "Retrieve repositories which have been forked from this one. Unlike {@link #getRelatedRepositories(Repository,\n PageRequest) related repositories}, this only looks at a given repository's direct forks. If those forks have\n themselves been the origin of more forks, such \"grandchildren\" repositories will not be retrieved.\n <p>\n Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even\n if other repositories have been forked from this one.",
        "operationId": "getForkedRepositories",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/related": {
      "get": {
        "summary": "getRelatedRepositories",
        "description": "Retrieve repositories which are related to this one. Related repositories are from the same\n {@link Repository#getHierarchyId() hierarchy} as this repository.\n <p>\n Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even\n if more repositories are part of this repository's hierarchy.",
        "operationId": "getRelatedRepositories",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/recreate": {
      "post": {
        "summary": "retryCreateRepository",
        "description": "If a create or fork operation fails, calling this method will clean up the broken repository and try again. The\n repository must be in an INITIALISATION_FAILED state.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this\n resource.",
        "operationId": "retryCreateRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests": {
      "post": {
        "summary": "create",
        "description": "Create a new pull request between two branches. The branches may be in the same repository, or different ones.\n When using different repositories, they must still be in the same {@link Repository#getHierarchyId() hierarchy}.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the \"from\" and \"to\"repositories to\n call this resource.",
        "operationId": "create",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getPage",
        "description": "Retrieve a page of pull requests to or from the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call\n this resource.\n\n Optionally clients can specify PR participant filters. Each filter has a mandatory {@code username.N}\n parameter, and the optional {@code role.N} and {@code approved.N} parameters.\n <ul>\n     <li>\n         {@code username.N} - the \"root\" of a single participant filter, where \"N\" is a natural number\n         starting from 1. This allows clients to specify multiple participant filters, by providing consecutive\n         filters as {@code username.1}, {@code username.2} etc. Note that the filters numbering has to start\n         with 1 and be continuous for all filters to be processed. The total allowed number of participant\n         filters is 10 and all filters exceeding that limit will be dropped.\n     </li>\n     <li>\n         {@code role.N}(optional) the role associated with {@code username.N}.\n         This must be one of {@code AUTHOR}, {@code REVIEWER}, or{@code PARTICIPANT}\n     </li>\n     <li>\n         {@code approved.N}(optional) the approved status associated with {@code username.N}.\n         That is whether {@code username.N} has approved the PR. Either {@code true}, or {@code false}\n     </li>\n </ul>",
        "operationId": "getPage",
        "parameters": [
          {
            "name": "direction",
            "in": "query",
            "description": "(optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified\n                  repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "incoming",
              "example": "incoming"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "(optional) a <i>fully-qualified</i> branch ID to find pull requests to or from,\n           such as {@code refs/heads/master}",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "(optional, defaults to <strong>OPEN</strong>). Supply <strong>ALL</strong> to return pull request\n               in any state. If a state is supplied only pull requests in the specified state will be returned.\n               Either <strong>OPEN</strong>, <strong>DECLINED</strong> or <strong>MERGED</strong>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "(optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either\n              <strong>OLDEST</strong> (as in: \"oldest first\") or <strong>NEWEST</strong>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withAttributes",
            "in": "query",
            "description": "(optional) defaults to true, whether to return additional pull request attributes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "withProperties",
            "in": "query",
            "description": "(optional) defaults to true, whether to return additional pull request properties",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}": {
      "get": {
        "summary": "get",
        "description": "Retrieve a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "Getget",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the ID of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "update",
        "description": "Update the title, description, reviewers or destination branch of an existing pull request.\n <p>\n <strong>Note:</strong> the <em>reviewers</em> list may be updated using this resource. However the\n <em>author</em> and <em>participants</em> list may not.\n <p>\n The authenticated user must either:\n <ul>\n     <li>be the author of the pull request and have the <strong>REPO_READ</strong> permission for the repository\n     that this pull request targets; or</li>\n     <li>have the <strong>REPO_WRITE</strong> permission for the repository that this pull request targets</li>\n </ul>\n to call this resource.",
        "operationId": "Putupdate",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the ID of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "delete",
        "description": "Deletes a pull request.\n <p>\n To call this resource, users must be authenticated and have permission to view the pull request.\n Additionally, they must:\n <ul>\n     <li>\n         be the pull request author, if the system is configured to allow authors to delete their own\n         pull requests (this is the default) OR\n     </li>\n     <li>have repository administrator permission for the repository the pull request is targeting</li>\n </ul>\n\n A body containing the version of the pull request must be provided with this request.\n\n <pre><code>{ \"version\": 1 }</code></pre>",
        "operationId": "delete",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the ID of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge": {
      "post": {
        "summary": "merge",
        "description": "Merge the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "merge",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "the current version of the pull request. If the server's version isn't the same as the specified\n                version the operation will fail. To determine the current version of the pull request it should be\n                fetched from the server prior to this operation. Look for the 'version' attribute in the returned\n                JSON structure.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "canMerge",
        "description": "Test whether a pull request can be merged.\n <p>\n A pull request may not be merged if:\n <ul>\n     <li>there are conflicts that need to be manually resolved before merging; and/or</li>\n     <li>one or more merge checks have vetoed the merge.</li>\n </ul>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "canMerge",
        "parameters": [
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen": {
      "post": {
        "summary": "reopen",
        "description": "Re-open a declined pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "reopen",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "the current version of the pull request. If the server's version isn't the same as the specified\n                version the operation will fail. To determine the current version of the pull request it should be\n                fetched from the server prior to this operation. Look for the 'version' attribute in the returned\n                JSON structure.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline": {
      "post": {
        "summary": "decline",
        "description": "Decline a pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "decline",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "the current version of the pull request. If the server's version isn't the same as the specified\n                version the operation will fail. To determine the current version of the pull request it should be\n                fetched from the server prior to this operation. Look for the 'version' attribute in the returned\n                JSON structure.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities": {
      "get": {
        "summary": "getActivities",
        "description": "Retrieve a page of activity associated with a pull request.\n <p>\n Activity items include comments, approvals, rescopes (i.e. adding and removing of commits), merges and more.\n <p>\n Different types of activity items may be introduced in newer versions of Stash or by user installed plugins, so\n clients should be flexible enough to handle unexpected entity shapes in the returned page.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "fromId",
            "in": "query",
            "description": "(optional) the id of the activity item to use as the first item in the returned page",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fromType",
            "in": "query",
            "description": "(required if <strong>fromId</strong> is present) the type of the activity item specified by\n                 <strong>fromId</strong> (either <strong>COMMENT</strong> or <strong>ACTIVITY</strong>)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "the id of the pull request within the repository",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/tags": {
      "get": {
        "summary": "getTags",
        "description": "Retrieve the tags matching the supplied <strong>filterText</strong> param.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this\n resource.",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "filterText",
            "in": "query",
            "description": "the text to match on",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "createTag",
        "description": "Creates a tag using the information provided in the {@link RestCreateTagRequest request}\n <p>\n The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call this\n resource.",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createTagRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/tags/{name:.*}": {
      "get": {
        "summary": "getTag",
        "description": "Retrieve a tag in the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this\n resource.",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "the name of the tag to be retrieved",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/pull-requests": {
      "get": {
        "summary": "getPullRequestSettings",
        "description": "Retrieve the pull request settings for the context repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this\n resource.\n <p>\n This resource will call all RestFragments that are registered with the key\n <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a\n non-empty Map of errors, then no fragments will execute.\n <p>\n The property keys for the settings that are bundled with the application are\n <ul>\n     <li>mergeConfig - the merge strategy configuration for pull requests</li>\n     <li>requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 if the merge check is disabled</li>\n     <li>com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - the merge check configuration for required approvers</li>\n     <li>requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable</li>\n     <li>requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable</li>\n     <li>requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 if the merge check is disabled</li>\n     <li>com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - the merge check configuration for required builds</li>\n </ul>",
        "operationId": "getPullRequestSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "updatePullRequestSettings",
        "description": "Update the pull request settings for the context repository.\n <p>\n The authenticated user must have <strong>REPO_ADMIN</strong> permission for the context repository to call this\n resource.\n <p>\n This resource will call all RestFragments that are registered with the key\n <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a\n non-empty Map of errors, then no fragments will execute.\n <p>\n Only the settings that should be updated need to be included in the request.\n <p>\n The property keys for the settings that are bundled with the application are\n <ul>\n     <li>mergeConfig - the merge strategy configuration for pull requests</li>\n     <li>requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 to disable the merge check</li>\n     <li>com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required approvals)</li>\n     <li>requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable</li>\n     <li>requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable</li>\n     <li>requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 to disable the merge check</li>\n     <li>com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required builds)</li>\n </ul>\n <strong>Merge strategy configuration deletion:</strong>\n <p>\n An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty\n \"mergeConfig\" attribute. i.e:\n <pre>\n {\n     \"mergeConfig\": {\n     }\n }\n </pre>\n Upon completion of this request, the effective configuration will be:\n <ul>\n     <li>The configuration set for this repository's SCM type as set at the project level, if present, otherwise</li>\n     <li>the configuration set for this repository's SCM type as set at the instance level, if present, otherwise</li>\n     <li>the default configuration for this repository's SCM type</li>\n <ul>",
        "operationId": "updatePullRequestSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatePullRequestSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/inbox/pull-requests/count": {
      "get": {
        "summary": "getPullRequestCount",
        "description": "",
        "operationId": "getPullRequestCount",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/inbox/pull-requests": {
      "get": {
        "summary": "getPullRequests",
        "description": "",
        "operationId": "GetgetPullRequests",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "example": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25,
              "example": 25
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "reviewer",
              "example": "reviewer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json; charset=UTF-8": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/dashboard/pull-request-suggestions": {
      "get": {
        "summary": "getPullRequestSuggestions",
        "description": "Retrieves a page of suggestions for pull requests that the currently authenticated user may wish to\n raise. Such suggestions are based on ref changes occurring and so contain the ref change that\n prompted the suggestion plus the time the change event occurred. Changes will be returned in\n descending order based on the time the change that prompted the suggestion occurred.\n <p>\n Note that although the response is a page object, the interface does not support paging, however\n a limit can be applied to the size of the returned page.",
        "operationId": "getPullRequestSuggestions",
        "parameters": [
          {
            "name": "changesSince",
            "in": "query",
            "description": "restrict pull request suggestions to be based on events that occurred since some time\n                     in the past. This is expressed in seconds since \"now\". So to return suggestions\n                     based only on activity within the past 48 hours, pass a value of 172800.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "172800",
              "example": "172800"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "restricts the result set to return at most this many suggestions.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 3,
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/dashboard/pull-requests": {
      "get": {
        "summary": "getPullRequests",
        "description": "Retrieve a page of pull requests where the current authenticated user is involved as either a reviewer, author\n or a participant. The request may be filtered by pull request state, role or participant status.",
        "operationId": "GetgetPullRequests1",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "(optional, defaults to returning pull requests in any state). If a state is supplied only pull\n              requests in the specified state will be returned. Either <strong>OPEN</strong>,\n              <strong>DECLINED</strong> or <strong>MERGED</strong>.\n              Omit this parameter to return pull request in any state.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "(optional, defaults to returning pull requests for any role). If a role is supplied only pull\n              requests where the authenticated user is a participant in the given role will be returned.\n              Either <strong>REVIEWER</strong>, <strong>AUTHOR</strong> or <strong>PARTICIPANT</strong>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantStatus",
            "in": "query",
            "description": "(optional, defaults to returning pull requests with any participant status). A comma\n                          separated list of participant status. That is, one or more of\n                          <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or <strong>APPROVED</strong>.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "(optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either\n              <strong>OLDEST</strong> (as in: \"oldest first\"), <strong>NEWEST</strong>,\n              <strong>PARTICIPANT_STATUS</strong>, or <strong>CLOSED_DATE</strong>. Where\n              <strong>CLOSED_DATE</strong> is specified and the result set includes pull requests that are not in\n              the closed state, these pull requests will appear first in the result set, followed by most recently\n              closed pull requests.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "closedSince",
            "in": "query",
            "description": "(optional, defaults to returning pull requests regardless of closed since date). Permits\n                      returning only pull requests with a closed timestamp set more recently that\n                      (now - closedSince). Units are in seconds. So for example if closed since 86400 is set only\n                      pull requests closed in the previous 24 hours will be returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits": {
      "get": {
        "summary": "getCommits",
        "description": "Retrieve commits for the specified pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "getCommits",
        "parameters": [
          {
            "name": "withCounts",
            "in": "query",
            "description": "if set to true, the service will add \"authorCount\" and \"totalCount\" at the end of the page.\n                     \"authorCount\" is the number of different authors and \"totalCount\" is the total number of commits.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/permissions/groups": {
      "get": {
        "summary": "getGroupsWithAnyPermission",
        "description": "Retrieve a page of groups that have been granted at least one permission for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "GetgetGroupsWithAnyPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "revokePermissionsForGroup",
        "description": "Revoke all permissions for the specified project for a group.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.\n <p>\n In addition, a user may not revoke a group's permissions if it will reduce their own permission level.",
        "operationId": "DeleterevokePermissionsForGroup",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name of the group",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setPermissionForGroups",
        "description": "Promote or demote a group's permission level for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource. In addition, a user may not demote a group's permission level if their\n own permission level would be reduced as a result.",
        "operationId": "setPermissionForGroups",
        "parameters": [
          {
            "name": "permission",
            "in": "query",
            "description": "The permission to grant.\n                       See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)\n                       for a detailed explanation of what each permission entails.\n                       Available project permissions are:\n                       <ul>\n                           <li>PROJECT_READ</li>\n                           <li>PROJECT_WRITE</li>\n                           <li>PROJECT_ADMIN</li>\n                       </ul>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "the names of the groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/permissions/groups/none": {
      "get": {
        "summary": "getGroupsWithoutAnyPermission",
        "description": "Retrieve a page of groups that have no granted permissions for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "GetgetGroupsWithoutAnyPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/permissions/users": {
      "get": {
        "summary": "getUsersWithAnyPermission",
        "description": "Retrieve a page of users that have been granted at least one permission for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "GetgetUsersWithAnyPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only user names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "revokePermissionsForUser",
        "description": "Revoke all permissions for the specified project for a user.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.\n <p>\n In addition, a user may not revoke their own project permissions if they do not have a higher global permission.",
        "operationId": "DeleterevokePermissionsForUser",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name of the user",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setPermissionForUsers",
        "description": "Promote or demote a user's permission level for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource. In addition, a user may not reduce their own permission level unless\n they have a global permission that already implies that permission.",
        "operationId": "setPermissionForUsers",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the names of the users",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "the permission to grant. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)\n                       for a detailed explanation of what each permission entails.\n                       Available project permissions are:\n                       <ul>\n                           <li>PROJECT_READ</li>\n                           <li>PROJECT_WRITE</li>\n                           <li>PROJECT_ADMIN</li>\n                       </ul>",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/permissions/users/none": {
      "get": {
        "summary": "getUsersWithoutPermission",
        "description": "Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "GetgetUsersWithoutPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only user names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/permissions/{permission}/all": {
      "get": {
        "summary": "hasAllUserPermission",
        "description": "Check whether the specified permission is the default permission (granted to all users) for a project.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "hasAllUserPermission",
        "parameters": [
          {
            "name": "permission",
            "in": "path",
            "description": "the permission to grant\n                       Available project permissions are:\n                       <ul>\n                           <li>PROJECT_READ</li>\n                           <li>PROJECT_WRITE</li>\n                           <li>PROJECT_ADMIN</li>\n                       </ul>",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "modifyAllUserPermission",
        "description": "Grant or revoke a project permission to all users, i.e. set the default permission.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\n global permission to call this resource.",
        "operationId": "modifyAllUserPermission",
        "parameters": [
          {
            "name": "allow",
            "in": "query",
            "description": "<em>true</em> to grant the specified permission to all users, or <em>false</em> to revoke it",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "the permission to grant\n                       Available project permissions are:\n                       <ul>\n                           <li>PROJECT_READ</li>\n                           <li>PROJECT_WRITE</li>\n                           <li>PROJECT_ADMIN</li>\n                       </ul>",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/settings/pull-requests/{scmId}": {
      "get": {
        "summary": "getPullRequestSettings",
        "description": "Retrieve the merge strategy configuration for this project and SCM.\n <p>\n The authenticated user must have <strong>PROJECT_READ</strong> permission for the context repository to call this\n resource.",
        "operationId": "GetgetPullRequestSettings",
        "parameters": [
          {
            "name": "scmId",
            "in": "path",
            "description": "the SCM to get strategies for",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "updatePullRequestSettings",
        "description": "Update the pull request merge strategy configuration for this project and SCM.\n <p>\n The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context repository to call this\n resource.\n <p>\n Only the strategies provided will be enabled, the default must be set and included in the set of strategies.\n <p>\n An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with\n an empty \"mergeConfig\" attribute. i.e:\n <pre>\n {\n     \"mergeConfig\": {\n     }\n }\n </pre>\n Upon completion of this request, the effective configuration will be the configuration explicitly set for\n the SCM, or if no such explicit configuration is set then the default configuration will be used.",
        "operationId": "PostupdatePullRequestSettings",
        "parameters": [
          {
            "name": "scmId",
            "in": "path",
            "description": "the SCM to get strategies for",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatePullRequestSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/exports/{jobId}/cancel": {
      "post": {
        "summary": "cancelExportJob",
        "description": "Requests the cancellation of an export job.\n\n <p>The request to cancel a job will be processed successfully if the job is actually still running. If it has\n already finished (successfully or with errors) or if it has already been canceled before, then an error will be\n returned.\n\n <p>There might be a small delay between accepting the request and actually cancelling the job. In most cases,\n the delay will be close to instantaneously. In the unlikely case of communication issues across a cluster,\n it can however take a few seconds to cancel a job.\n\n <p>A client should always actively query the job status to confirm that a job has been successfully canceled.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "cancelExportJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "the ID of the job to cancel",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/imports/{jobId}/cancel": {
      "post": {
        "summary": "cancelImportJob",
        "description": "Requests the cancellation of an import job.\n\n <p>The request to cancel a job will be processed successfully if the job is actually still running. If it has\n already finished (successfully or with errors) or if it has already been canceled before, then an error will be\n returned.\n\n <p>Note that import jobs are not canceled as instantaneously as export jobs. Rather, once the request has been\n accepted, there are a number of checkpoints at which the job will actually apply it and stop. This is to keep\n the system in a reasonably consistent state:\n\n <ul>\n     <li>After the current fork hierarchy has been imported and verified.</li>\n     <li>Before the next repository is imported.</li>\n     <li>Before the next pull request is imported.</li>\n </ul>\n\n <p>A client should always actively query the job status to confirm that a job has been successfully canceled.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "cancelImportJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "the ID of the job to cancel",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/exports/{jobId}": {
      "get": {
        "summary": "getExportJob",
        "description": "Gets the details, including the current status and progress, of the export job identified by the given ID.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getExportJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "the ID of the job",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/exports/{jobId}/messages": {
      "get": {
        "summary": "getExportJobMessages",
        "description": "Gets the messages generated by the job.\n\n <p>Without any filter, all messages will be returned, but the response can optionally be filtered for the\n following severities. The severity parameter can be repeated to include multiple severities\n in one response.\n\n <ul>\n     <li>INFO</li>\n     <li>WARN</li>\n     <li>ERROR</li>\n </ul>\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getExportJobMessages",
        "parameters": [
          {
            "name": "severity",
            "in": "query",
            "description": "the severity to include in the results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "the ID of the job",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/imports/{jobId}": {
      "get": {
        "summary": "getImportJob",
        "description": "Gets the details, including the current status and progress, of the import job identified by the given ID.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getImportJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "the ID of the job",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/imports/{jobId}/messages": {
      "get": {
        "summary": "getImportJobMessages",
        "description": "Gets the messages generated by the job.\n\n <p>Without any filter, all messages will be returned, but the response can optionally be filtered for the\n following severities. The severity parameter can be repeated to include multiple severities\n in one response.\n\n <ul>\n     <li>INFO</li>\n     <li>WARN</li>\n     <li>ERROR</li>\n </ul>\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getImportJobMessages",
        "parameters": [
          {
            "name": "severity",
            "in": "query",
            "description": "the severity to include in the results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "the ID of the job",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/exports/preview": {
      "post": {
        "summary": "previewExport",
        "description": "Enumerates the projects and repositories that would be exported for a given export request.\n\n <p>All affected repositories will be enumerated explicitly, and while projects are listed as individual items in\n responses from this endpoint, their presence does not imply that all their repositories are included.\n\n <p>While this endpoint can be used to verify that all selectors in the request apply as intended, it should be\n noted that a subsequent, actual export might contain a different set of repositories, as they might have been\n added or deleted in the meantime.\n\n <p>Note that the overall response from this endpoint can become very large when a lot of repositories end up in\n the selection. This is why the server is streaming the response while it is being generated (as opposed to\n creating it in memory and then sending it all at once) and it can be consumed in a streaming way, too.\n\n <p>Also, due to the potential size of the response, projects and repositories are listed with fewer details than\n in other REST responses.\n\n <p>For a more detailed description of selectors, see the endpoint documentation for starting an export.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "previewExport",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/previewExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/exports": {
      "post": {
        "summary": "startExport",
        "description": "<p>Starts a background job that exports the selected repositories.\n\n <p>Only 2 concurrent exports are supported <em>per cluster node</em>. If a request ends up on a node that is already\n running that many export jobs, the request will be rejected and an error returned.\n\n <p>The response includes a description of the job that has been started, and its ID can be used to query\n these details again, including the current progress, warnings and errors that occurred while processing the job,\n and to interrupt and cancel the execution of this job.\n\n <p>The request to start an export is similar to the one for previewing an export. Additionally, it accepts an optional\n parameter, <tt>exportLocation</tt>, which can be used to specify a <em>relative</em> path within\n <tt>data/migration/export</tt> in the shared home directory. No locations outside of that directory will be\n accepted for exports.\n\n <p>There are essentially three ways to select repositories for export. Regardless of which you use, a few\n general rules apply:\n <ul>\n     <li>You can supply a list of selectors. The selection will be additive.</li>\n     <li>Repositories that are selected more than once due to overlapping selectors will be de-duplicated and\n     effectively exported only once.</li>\n     <li>For every selected repository, its full fork hierarchy will be considered selected, even if parts of that\n     hierarchy would otherwise not be matched by the provided selectors. For example, when you explicitly\n     select a single repository only, but that repository is a fork, then its origin will be exported (and\n     eventually imported), too.</li>\n </ul>\n\n <p>Now, a single repository can be selected like this:\n\n <pre>\n     {\n        \"projectKey\": \"PRJ\",\n        \"slug\": \"my-repo\"\n     }\n     </pre>\n\n <p>Second, all repositories in a specific project can be selected like this:\n\n <pre>\n     {\n        \"projectKey\": \"PRJ\",\n        \"slug\": *\"\n     }\n     </pre>\n\n <p>And third, all projects and repositories in the system would be selected like this:\n\n <pre>\n     {\n        \"projectKey\": \"*\",\n        \"slug\": *\"\n     }\n     </pre>\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "startExport",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/startExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/migration/imports": {
      "post": {
        "summary": "startImport",
        "description": "Starts a background job that imports the specified archive.\n\n <p>Only 1 import at a time is supported <em>per cluster</em>. If another request is made while an import is already\n running, the request will be rejected and an error returned.\n\n <p>The path in the request must point to a valid archive file. It can be either absolute, or will be interpreted\n as relative to the <tt>data/migration/import</tt> directory in the shared home directory.\n\n <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "startImport",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/startImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks": {
      "get": {
        "summary": "getPullRequestTasks",
        "description": "Retrieve the tasks associated with a pull request.",
        "operationId": "getPullRequestTasks",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks/count": {
      "get": {
        "summary": "countPullRequestTasks",
        "description": "Retrieve the total number of {@link TaskState#OPEN open} and\n {@link TaskState#RESOLVED resolved} tasks associated with a pull request.",
        "operationId": "countPullRequestTasks",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments": {
      "get": {
        "summary": "getComments",
        "description": "Gets comments for the specified PullRequest.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "GetgetComments",
        "parameters": [
          {
            "name": "anchorState",
            "in": "query",
            "description": "{@code ACTIVE} to stream the active comments;\n                    {@code ORPHANED} to stream the orphaned comments;\n                    {@code ALL} to stream both the active and the orphaned comments;",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "ACTIVE",
              "example": "ACTIVE"
            }
          },
          {
            "name": "diffType",
            "in": "query",
            "description": "{@code EFFECTIVE} to stream the comments related to the effective diff of the pull request;\n                    {@code RANGE} to stream comments related to a commit range between two arbitrary commits\n                                  (requires {@code fromHash} and {@code toHash});\n                    {@code COMMIT} to stream comments related to a commit between two arbitrary commits (requires\n                        {@code fromHash} and {@code toHash})",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromHash",
            "in": "query",
            "description": "the from commit hash to stream comments for a {@code RANGE} or {@code COMMIT} arbitrary change scope",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "the path to stream comments for a given path",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toHash",
            "in": "query",
            "description": "the to commit hash to stream comments for a {@code RANGE} or {@code COMMIT} arbitrary change scope",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "createComment",
        "description": "Add a new comment.\n <p>\n Comments can be added in a few places by setting different attributes:\n <p>\n General pull request comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a pull request.\"\n     }\n     </pre>\n\n Reply to a comment:\n\n <pre>\n     {\n         \"text\": \"A measured reply.\",\n         \"parent\": {\n             \"id\": 1\n         }\n     }\n     </pre>\n\n General file comment:\n\n <pre>\n     {\n         \"text\": \"An insightful general comment on a file.\",\n         \"anchor\": {\n             \"diffType\": \"RANGE\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n\n File line comment:\n\n <pre>\n     {\n         \"text\": \"A pithy comment on a particular line within a file.\",\n         \"anchor\": {\n             \"diffType\": \"COMMIT\",\n             \"line\": 1,\n             \"lineType\": \"CONTEXT\",\n             \"fileType\": \"FROM\",\n             \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n             \"path\": \"path/to/file\",\n             \"srcPath\": \"path/to/file\",\n             \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n         }\n     }\n     </pre>\n <p>\n For file and line comments, 'path' refers to the path of the file to which the comment should be applied and\n 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also,\n fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment\n was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility\n purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to\n 'EFFECTIVE'. In any other cases the diffType is REQUIRED.\n <p>\n For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to\n the type of diff hunk, which can be:\n <ul>\n     <li>'ADDED' - for an added line;</li>\n     <li>'REMOVED' - for a removed line; or</li>\n     <li>'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>\n </ul>\n 'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when\n displaying the diff in a side-by-side way. Currently the supported values are:\n <ul>\n     <li>'FROM' - the source file of the diff</li>\n     <li>'TO' - the destination file of the diff</li>\n </ul>\n If the current user is not a participant the user is added as a watcher of the pull request.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "PostcreateComment",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}": {
      "get": {
        "summary": "getComment",
        "description": "Retrieves a pull request comment.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "GetgetComment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "the id of the comment to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteComment",
        "description": "Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong>\n and above may delete comments created by other users.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "DeletedeleteComment",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The expected version of the comment. This must match the server's version of the comment or\n                    the delete will fail. To determine the current version of the comment, the comment should be\n                    fetched from the server prior to the delete. Look for the 'version' attribute in the\n                    returned JSON structure.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "the id of the comment to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "updateComment",
        "description": "Update the text of a comment. Only the user who created a comment may update it.\n <p>\n <strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match the\n server's version of the comment or the update will fail. To determine the current version of\n the comment, the comment should be fetched from the server prior to the update. Look for the\n 'version' attribute in the returned JSON structure.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request\n targets to call this resource.",
        "operationId": "PutupdateComment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "the id of the comment to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/changes": {
      "get": {
        "summary": "getChanges",
        "description": "Retrieve a page of changes made in a specified commit.\n <p>\n <strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not\n possible to request subsequent content when that cap is exceeded.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "GetgetChanges",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "the commit to which <code>until</code> should be compared to produce a page of changes.\n                      If not specified the commit's first parent is assumed (if one exists)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "{@code true} to apply comment counts in the changes (the default); otherwise, {@code false}\n                      to stream changes without comment counts",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the commit to retrieve changes for",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/users": {
      "put": {
        "summary": "updateUserDetails1",
        "description": "Update the currently authenticated user's details. The update will always be applied to the currently\n authenticated user.",
        "operationId": "updateUserDetails1",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "summary": "getUsers",
        "description": "Retrieve a page of users, optionally run through provided filters.\n <p>\n Only authenticated users may call this resource.\n\n <h3>Supported Filters</h3>\n <p>\n Filters are provided in query parameters in a standard <code>name=value</code> fashion. The following filters are\n currently supported:\n <ul>\n     <li>\n         {@code filter} - return only users, whose username, name or email address <i>contain</i> the\n         {@code filter} value\n     </li>\n     <li>\n         {@code group} - return only users who are members of the given group\n     </li>\n     <li>\n         {@code permission} - the \"root\" of a permission filter, whose value must be a valid global,\n         project, or repository permission. Additional filter parameters referring to this filter that specify the\n         resource (project or repository) to apply the filter to must be prefixed with <code>permission.</code>. See the\n         section \"Permission Filters\" below for more details.\n     </li>\n     <li>\n         {@code permission.N} - the \"root\" of a single permission filter, similar to the {@code permission}\n         parameter, where \"N\" is a natural number starting from 1. This allows clients to specify multiple permission\n         filters, by providing consecutive filters as {@code permission.1}, {@code permission.2} etc. Note that\n         the filters numbering has to start with 1 and be continuous for all filters to be processed. The total allowed\n         number of permission filters is 50 and all filters exceeding that limit will be dropped. See the section\n         \"Permission Filters\" below for more details on how the permission filters are processed.\n     </li>\n </ul>\n \n\n <h3>Permission Filters</h3>\n <p>\n The following three sub-sections list parameters supported for permission filters (where <code>[root]</code> is\n the root permission filter name, e.g. {@code permission}, {@code permission.1} etc.) depending on the\n permission resource. The system determines which filter to apply (Global, Project or Repository permission)\n based on the <code>[root]</code> permission value. E.g. {@code ADMIN} is a global permission,\n {@code PROJECT_ADMIN} is a project permission and {@code REPO_ADMIN} is a repository permission. Note\n that the parameters for a given resource will be looked up in the order as they are listed below, that is e.g.\n for a project resource, if both {@code projectId} and {@code projectKey} are provided, the system will\n use {@code projectId} for the lookup.\n <h4>Global permissions</h4>\n <p>\n The permission value under <code>[root]</code> is the only required and recognized parameter, as global\n permissions do not apply to a specific resource.\n <p>\n Example valid filter: <code>permission=ADMIN</code>.\n <h4>Project permissions</h4>\n <ul>\n     <li><code>[root]</code>- specifies the project permission</li>\n     <li><code>[root].projectId</code> - specifies the project ID to lookup the project by</li>\n     <li><code>[root].projectKey</code> - specifies the project key to lookup the project by</li>\n </ul>\n <p>\n Example valid filter: <code>permission.1=PROJECT_ADMIN&permission.1.projectKey=TEST_PROJECT</code>.\n <h4>Repository permissions</h4>\n <ul>\n     <li><code>[root]</code>- specifies the repository permission</li>\n     <li><code>[root].projectId</code> - specifies the repository ID to lookup the repository by</li>\n     <li><code>[root].projectKey</code> and <code>[root].repositorySlug</code>- specifies the project key and\n     repository slug to lookup the repository by; both values <i>need to</i> be provided for this look up to be\n     triggered</li>\n </ul>\n Example valid filter: <code>permission.2=REPO_ADMIN&permission.2.projectKey=TEST_PROJECT&permission.2.repositorySlug=test_repo</code>.",
        "operationId": "GetgetUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/users/{userSlug}/avatar.png": {
      "post": {
        "summary": "uploadAvatar",
        "description": "Update the avatar for the user with the supplied <strong>slug</strong>.\n <p>\n This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.\n <p>\n There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded\n file size (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and\n <strong>JPEG</strong> are preferred due to the file size limit.\n <p>\n This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to\n pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the\n value <code>no-check</code>.\n <p>\n An example <a href=\"http://curl.haxx.se/\">curl</a> request to upload an image name 'avatar.png' would be:\n <pre>\n curl -X POST -u username:password -H \"X-Atlassian-Token: no-check\" http://example.com/rest/api/latest/users/jdoe/avatar.png -F avatar=@avatar.png\n </pre>\n <p>\n Users are always allowed to update their own avatar. To update someone else's avatar the authenticated user must\n have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a\n <strong>SYS_ADMIN</strong> user's avatar.",
        "operationId": "PostuploadAvatar",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "deleteAvatar",
        "description": "Delete the avatar associated to a user.\n <p>\n Users are always allowed to delete their own avatar. To delete someone else's avatar the authenticated user must\n have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a\n <strong>SYS_ADMIN</strong> user's avatar.",
        "operationId": "deleteAvatar",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/users/credentials": {
      "put": {
        "summary": "updateUserPassword1",
        "description": "Update the currently authenticated user's password.",
        "operationId": "updateUserPassword1",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/users/{userSlug}": {
      "get": {
        "summary": "getUser",
        "description": "Retrieve the user matching the supplied <strong>userSlug</strong>.\n <p>",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/permissions/groups": {
      "get": {
        "summary": "getGroupsWithAnyPermission",
        "description": "Retrieve a page of groups that have been granted at least one global permission.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "GetgetGroupsWithAnyPermission1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "revokePermissionsForGroup",
        "description": "Revoke all global permissions for a group.\n\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>greater or equal permissions than the current permission level of the group (a user may not demote the\n     permission level of a group with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not revoke a group's permissions if their own permission level\n would be reduced as a result.",
        "operationId": "DeleterevokePermissionsForGroup1",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name of the group",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setPermissionForGroups",
        "description": "Promote or demote a user's global permission level. Available global permissions are:\n <ul>\n     <li>LICENSED_USER</li>\n     <li>PROJECT_CREATE</li>\n     <li>ADMIN</li>\n     <li>SYS_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Global+permissions\">Bitbucket Server\n documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>the permission they are attempting to grant or higher; and</li>\n     <li>greater or equal permissions than the current permission level of the group (a user may not demote the\n     permission level of a group with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not demote a group's permission level if their own permission\n level would be reduced as a result.",
        "operationId": "PutsetPermissionForGroups",
        "parameters": [
          {
            "name": "permission",
            "in": "query",
            "description": "the permission to grant",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "the names of the groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/permissions/groups/none": {
      "get": {
        "summary": "getGroupsWithoutAnyPermission",
        "description": "Retrieve a page of groups that have no granted global permissions.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "GetgetGroupsWithoutAnyPermission1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only group names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/permissions/users": {
      "get": {
        "summary": "getUsersWithAnyPermission",
        "description": "Retrieve a page of users that have been granted at least one global permission.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "GetgetUsersWithAnyPermission1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only user names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "revokePermissionsForUser",
        "description": "Revoke all global permissions for a user.\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>greater or equal permissions than the current permission level of the user (a user may not demote the\n     permission level of a user with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not demote their own permission level.",
        "operationId": "DeleterevokePermissionsForUser1",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name of the user",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "setPermissionForUsers",
        "description": "Promote or demote the global permission level of a user. Available global permissions are:\n <ul>\n     <li>LICENSED_USER</li>\n     <li>PROJECT_CREATE</li>\n     <li>ADMIN</li>\n     <li>SYS_ADMIN</li>\n </ul>\n See the <a href=\"https://confluence.atlassian.com/display/BitbucketServer/Global+permissions\">Bitbucket Server\n documentation</a> for a detailed explanation of what each permission entails.\n <p>\n The authenticated user must have:\n <ul>\n     <li><strong>ADMIN</strong> permission or higher; and</li>\n     <li>the permission they are attempting to grant; and</li>\n     <li>greater or equal permissions than the current permission level of the user (a user may not demote the\n     permission level of a user with higher permissions than them)</li>\n </ul>\n to call this resource. In addition, a user may not demote their own permission level.",
        "operationId": "PutsetPermissionForUsers",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the names of the users",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "the permission to grant",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/permissions/users/none": {
      "get": {
        "summary": "getUsersWithoutAnyPermission",
        "description": "Retrieve a page of users that have no granted global permissions.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.",
        "operationId": "getUsersWithoutAnyPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "if specified only user names containing the supplied string will be returned",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/watch": {
      "post": {
        "summary": "watch",
        "description": "Add the authenticated user as a watcher for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "Postwatch1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "unwatch",
        "description": "Remove the authenticated user as a watcher for the specified repository.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "Deleteunwatch1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits": {
      "get": {
        "summary": "getCommits",
        "description": "Retrieve a page of commits from a given starting commit or \"between\" two commits. If no explicit commit is\n specified, the tip of the repository's default branch is assumed. commits may be identified by branch or tag\n name or by ID. A path may be supplied to restrict the returned commits to only those which affect that path.\n <p>\n The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this\n resource.",
        "operationId": "GetgetCommits",
        "parameters": [
          {
            "name": "followRenames",
            "in": "query",
            "description": "if <code>true</code>, the commit history of the specified file will be followed past renames.\n                      Only valid for a path to a single file.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "ignoreMissing",
            "in": "query",
            "description": "<code>true</code> to ignore missing commits, <code>false</code> otherwise",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "merges",
            "in": "query",
            "description": "if present, controls how merge commits should be filtered. Can be either <code>exclude</code>,\n               to exclude merge commits, <code>include</code>, to include both merge commits and non-merge\n               commits or <code>only</code>, to only return merge commits.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "an optional path to filter commits by",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "the commit ID or ref (exclusively) to retrieve commits after",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "the commit ID (SHA1) or ref (inclusively) to retrieve commits before",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withCounts",
            "in": "query",
            "description": "optionally include the total number of commits and total number of unique authors",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}": {
      "get": {
        "summary": "getCommit",
        "description": "Retrieve a single commit <i>identified by its ID</i>>. In general, that ID is a SHA1. <u>From 2.11, ref names\n like \"refs/heads/master\" are no longer accepted by this resource.</u>\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "getCommit",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "an optional path to filter the commit by. If supplied the details returned <i>may not</i>\n             be for the specified commit. Instead, starting from the specified commit, they will be the\n             details for the first commit affecting the specified path.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the commit ID to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff": {
      "get": {
        "summary": "streamDiff",
        "description": "Retrieve the diff between two provided revisions.\n <p>\n <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap\n to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event\n that the cap is reached, the diff will be cut short and one or more {@code truncated} flags will be set to\n {@code true} on the {@code \"segments\"}, {@code \"hunks\"} and {@code \"diffs\"} properties, as well as the top-level\n object, in the returned JSON response.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "GetstreamDiff1234",
        "parameters": [
          {
            "name": "autoSrcPath",
            "in": "query",
            "description": "{@code true} to automatically try to find the source path when it's not provided,\n                      {@code false} otherwise. Requires the {@code path} to be provided.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "the number of context lines to include around added/removed lines in the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "the source path for the file, if it was copied, moved or renamed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "optional whitespace flag which can be set to {@code ignore-all}",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "{@code true} to embed comments in the diff (the default); otherwise {@code false}\n                      to stream the diff without comments",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff/{path:.*}": {
      "get": {
        "summary": "streamDiff",
        "description": "Retrieve the diff between two provided revisions.\n <p>\n <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap\n to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event\n that the cap is reached, the diff will be cut short and one or more {@code truncated} flags will be set to\n {@code true} on the {@code \"segments\"}, {@code \"hunks\"} and {@code \"diffs\"} properties, as well as the top-level\n object, in the returned JSON response.\n <p>\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this\n resource.",
        "operationId": "GetstreamDiff12345",
        "parameters": [
          {
            "name": "autoSrcPath",
            "in": "query",
            "description": "{@code true} to automatically try to find the source path when it's not provided,\n                      {@code false} otherwise. Requires the {@code path} to be provided.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "the number of context lines to include around added/removed lines in the diff",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1,
              "example": -1
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "the base revision to diff from. If omitted the parent revision of the until revision is used",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "the source path for the file, if it was copied, moved or renamed",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "optional whitespace flag which can be set to {@code ignore-all}",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "{@code true} to embed comments in the diff (the default); otherwise {@code false}\n                      to stream the diff without comments",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "the path to the file which should be diffed (optional)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path:.*",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/admin/pull-requests/{scmId}": {
      "get": {
        "summary": "getMergeConfig",
        "description": "Retrieve the merge strategies available for this instance.\n <p>\n The user must be authenticated to call this resource.",
        "operationId": "getMergeConfig",
        "parameters": [
          {
            "name": "scmId",
            "in": "path",
            "description": "the id of the scm to get strategies for",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "setMergeConfig",
        "description": "Update the pull request merge strategies for the context repository.\n <p>\n The authenticated user must have <strong>ADMIN</strong> permission for the context repository to call this\n resource.\n <p>\n Only the strategies provided will be enabled, only one may be set to default\n <p>\n An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with\n an empty \"mergeConfig\" attribute. i.e:\n <pre>\n {\n     \"mergeConfig\": {\n     }\n }\n </pre>\n Upon completion of this request, the effective configuration will be the default configuration.",
        "operationId": "setMergeConfig",
        "parameters": [
          {
            "name": "scmId",
            "in": "path",
            "description": "the id of the scm to get strategies for",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setMergeConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/1.0/markup/preview": {
      "post": {
        "summary": "preview",
        "description": "Preview generated HTML for the given markdown content.\n <p>\n Only authenticated users may call this resource.",
        "operationId": "preview",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/previewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "updateSettingsRequest": {
        "title": "updateSettingsRequest",
        "type": "object",
        "description": ""
      },
      "createBranchRequest": {
        "title": "createBranchRequest",
        "type": "object",
        "description": ""
      },
      "setDefaultBranchRequest": {
        "title": "setDefaultBranchRequest",
        "type": "object",
        "description": ""
      },
      "setMailConfigRequest": {
        "title": "setMailConfigRequest",
        "type": "object",
        "description": ""
      },
      "setSenderAddressRequest": {
        "title": "setSenderAddressRequest",
        "type": "object",
        "description": ""
      },
      "setSettingsRequest": {
        "title": "setSettingsRequest",
        "type": "object",
        "description": ""
      },
      "updateRequest": {
        "title": "updateRequest",
        "type": "object",
        "description": ""
      },
      "createCommentRequest": {
        "title": "createCommentRequest",
        "type": "object",
        "description": ""
      },
      "updateCommentRequest": {
        "title": "updateCommentRequest",
        "type": "object",
        "description": ""
      },
      "assignParticipantRoleRequest": {
        "title": "assignParticipantRoleRequest",
        "type": "object",
        "description": ""
      },
      "updateStatusRequest": {
        "title": "updateStatusRequest",
        "type": "object",
        "description": ""
      },
      "createProjectRequest": {
        "title": "createProjectRequest",
        "type": "object",
        "description": ""
      },
      "updateProjectRequest": {
        "title": "updateProjectRequest",
        "type": "object",
        "description": ""
      },
      "addLabelRequest": {
        "title": "addLabelRequest",
        "type": "object",
        "description": ""
      },
      "createWebhookRequest": {
        "title": "createWebhookRequest",
        "type": "object",
        "description": ""
      },
      "updateWebhookRequest": {
        "title": "updateWebhookRequest",
        "type": "object",
        "description": ""
      },
      "createTaskRequest": {
        "title": "createTaskRequest",
        "type": "object",
        "description": ""
      },
      "updateTaskRequest": {
        "title": "updateTaskRequest",
        "type": "object",
        "description": ""
      },
      "updateUserDetailsRequest": {
        "title": "updateUserDetailsRequest",
        "type": "object",
        "description": ""
      },
      "updateUserPasswordRequest": {
        "title": "updateUserPasswordRequest",
        "type": "object",
        "description": ""
      },
      "renameUserRequest": {
        "title": "renameUserRequest",
        "type": "object",
        "description": ""
      },
      "addUserToGroupRequest": {
        "title": "addUserToGroupRequest",
        "type": "object",
        "description": ""
      },
      "addGroupToUserRequest": {
        "title": "addGroupToUserRequest",
        "type": "object",
        "description": ""
      },
      "addUsersToGroupRequest": {
        "title": "addUsersToGroupRequest",
        "type": "object",
        "description": ""
      },
      "addUserToGroupsRequest": {
        "title": "addUserToGroupsRequest",
        "type": "object",
        "description": ""
      },
      "removeUserFromGroupRequest": {
        "title": "removeUserFromGroupRequest",
        "type": "object",
        "description": ""
      },
      "removeGroupFromUserRequest": {
        "title": "removeGroupFromUserRequest",
        "type": "object",
        "description": ""
      },
      "createRepositoryRequest": {
        "title": "createRepositoryRequest",
        "type": "object",
        "description": ""
      },
      "updateRepositoryRequest": {
        "title": "updateRepositoryRequest",
        "type": "object",
        "description": ""
      },
      "forkRepositoryRequest": {
        "title": "forkRepositoryRequest",
        "type": "object",
        "description": ""
      },
      "createRequest": {
        "title": "createRequest",
        "type": "object",
        "description": ""
      },
      "deleteRequest": {
        "title": "deleteRequest",
        "type": "object",
        "description": ""
      },
      "createTagRequest": {
        "title": "createTagRequest",
        "type": "object",
        "description": ""
      },
      "updatePullRequestSettingsRequest": {
        "title": "updatePullRequestSettingsRequest",
        "type": "object",
        "description": ""
      },
      "previewExportRequest": {
        "title": "previewExportRequest",
        "type": "object",
        "description": ""
      },
      "startExportRequest": {
        "title": "startExportRequest",
        "type": "object",
        "description": ""
      },
      "startImportRequest": {
        "title": "startImportRequest",
        "type": "object",
        "description": ""
      },
      "setMergeConfigRequest": {
        "title": "setMergeConfigRequest",
        "type": "object",
        "description": ""
      },
      "previewRequest": {
        "title": "previewRequest",
        "type": "object",
        "description": ""
      }
    }
  },
  "tags": []
}